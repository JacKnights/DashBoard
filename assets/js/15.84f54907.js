(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{146:function(t,n,o){"use strict";o.r(n);var r=o(0),l=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,n=t.$createElement,o=t._self._c||n;return o("div",{staticClass:"content"},[o("p",[o("strong",[t._v("目录结构设计方法")])]),o("p",[t._v("一般有两种：一种是以类型划分，一种是以业务划分。")]),o("ul",[o("li",[t._v("以类型划分目录结构的特点是，遵循代码分层架构，分类不同层的代码。如：以MVC架构为例的目录结构特点就是，所有的Entity模型放在同一目录下，所有的Boundary视图放在同一目录下，所有的Control控制器(或叫业务逻辑)放在同一目录下。")]),o("li",[t._v("以业务划分目录结构的特点是，以业务功能的形式组织代码，甚至可以将大业务拆分成小的业务组成。")])]),o("p",[o("strong",[t._v("逻辑架构")]),t._v("：逻辑架构关注的是功能，包含用户直接可见的功能，还有系统中隐含的功能。或者更加通俗来描述，逻辑架构更偏向我们日常所理解的“分层”，把一个项目分为“表示层、业务逻辑层、数据访问层”这样经典的“三层架构”。也就是对应于BCE模式的“Boundary，Control，Entity”。")]),o("p",[o("strong",[t._v("BCE模式")]),t._v("：")]),o("p",[t._v("即Boundary-Control-Entity Patterns，也是绘制时序图的一种方法。序列图关联了类图和用例图两方面，可通过BCE模式来确定序列图。BCE模型中将对象分为三类：边界类、控制类、实体类。")]),o("ul",[o("li",[o("strong",[t._v("边界类")]),t._v("：用来隔离系统内外，通常负责接收并响应系统内外消息，参与者与系统对象进行消息传递要通过边界类来实现。")]),o("li",[o("strong",[t._v("控制类")]),t._v("：一个用例会生成一个控制类。用来控制用例执行期间的复杂运算或者业务逻辑。")]),o("li",[o("strong",[t._v("实体类")]),t._v("：系统内部的对象。")])])])}],!1,null,null,null);n.default=l.exports}}]);